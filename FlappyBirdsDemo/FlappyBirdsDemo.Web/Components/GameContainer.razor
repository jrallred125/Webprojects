@if (_gameManager == null)
{
    <em>Loading...</em>
}
else
{
    <div class="border" style="@_leftBorderCSS"></div>
    <div class="game-container" style="@_gameCSS"tabindex="0" @onclick="_gameManager.StartGame" @onkeyup="HandleKeyUp">
        <div class="border" style="@_topBorderCSS"></div>
        <Sky Height="_gameManager.SkyHeight" Width="_gameManager.Width">
            <Bird Model="_gameManager.Bird" />
        </Sky>
        <Ground Height="_gameManager.GroundHeight" Width="_gameManager.Width" Top="_gameManager.SkyHeight"/>

        @foreach (var pipe in _gameManager.Pipes)
        {
            <Pipe Model="pipe" />
        }

    </div>
    <div class="border" style="@_rightBorderCSS"></div>
}

@code {

    [Parameter]
    public int GameWidth { get; set; } = 500;

    [Parameter]
    public int GameHeight { get; set; } = 730;
    GameManager _gameManager;

    string _gameCSS;
    string _leftBorderCSS;
    string _rightBorderCSS;
    string _topBorderCSS;

    protected override void OnParametersSet()
    {
        _gameManager = new(GameWidth, GameHeight);
        _gameManager.PropertyChanged += (o, e) => StateHasChanged();
        SetStyling();

    }

    void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == " ")
        {
            _gameManager.Bird.Jump();
        }
    }

    void SetStyling()
    {
        _gameCSS = $"width: {_gameManager.Width}px; height: {_gameManager.Height}px; left: {_gameManager.Border}px;";
        _leftBorderCSS = $"width: {_gameManager.Border}px; height: {_gameManager.Height + _gameManager.Border}px;";
        _rightBorderCSS = $"width: {_gameManager.Border}px; height: {_gameManager.Height + _gameManager.Border}px; left: {_gameManager.Width + _gameManager.Border}px;";
        _topBorderCSS = $"width: {_gameManager.Width + 2 * _gameManager.Border}px; height: {_gameManager.Border}px; top: {-_gameManager.Border}px; left: {-_gameManager.Border}px;";
    }
}

    }




}